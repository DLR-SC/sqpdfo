# -*- coding: utf-8 -*-
"""
Created on Thu Nov 06 11:53:16 2014
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% checks the condition of matrix A and if a threshold for the condition
% number is exceeded, matrix is perturbed by exchanging very small singular
% values
%
% programming: A. Troeltzsch, 2014
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

@author: jaco_da
"""

# Autogenerated with SMOP version 
# c:\Users\jaco_da\AppData\Local\Continuum\Anaconda\Scripts\smop-script.py ecdfo_check_cond.m

from __future__ import division
#try:
from runtime import *
#except ImportError:
#    from smop.runtime import *

def ecdfo_check_cond_(A=None,cthreshold=None,options=None,*args,**kwargs):
    #varargin = cellarray(args)
    #nargin = 3-[A,cthreshold,options].count(None)+len(args)

    badcond=0
    eps=1e-14
    #print "Prints----------------"
    #print isempty_
    #print find_
    #print isnan_
    #print isinf_
    #print A
    #print "--------------------------"
    if (isempty_(find_(isnan_(A))) and isempty_(find_(isinf_(A)))):
        condA=cond_(A)
        if (condA > cthreshold):
            badcond=1
    else:
        badcond=1
    if (badcond):
        U,S,V=svd_(A,0,nargout=3)
        Sdiag=diag_(S)
        Sdiag[Sdiag < 1e-07]=1e-07
        S=diag_(Sdiag)
        A=(V * S * U.T).T
        if norm_(A - A.T,inf) > eps:
            if options.verbose >= 3:
                disp_([char('### ecdfo_check_cond: '),char("matrix is non symmetric. Resetting A=(A+A')/2.")])
            A=(A + A.T) * 0.5
    return A,badcond
