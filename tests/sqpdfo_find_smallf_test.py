# -*- coding: utf-8 -*-
"""

INPUT VALUES

Created on Fri Nov 28 13:59:11 2014
x =

  -0.500000000000000
                   0
   0.500000000000000


fx =

   0.500000000000000


QZ =

   1.000000000000000                   0                   0                   0                   0                   0
                   0  -0.008891206010609   0.880092524061225  -0.216087341834818   0.011801709199185  -0.422522278591270
                   0  -0.894354200394905  -0.007052612842657   0.020660095393001   0.446785703792991   0.006043197219679
                   0  -0.012048659487353  -0.204172169927044  -0.975875461574765   0.016776691773235   0.074526377486275
                   0  -0.000044189137650  -0.428598309899763   0.020767625072745   0.004402943348236  -0.903245706680689
                   0  -0.447108866545437   0.002150237657216  -0.010733610864613  -0.894394997330149  -0.005605023022391


RZ =

   1.000000000000000   1.000000000000000   1.000000000000000   1.000000000000000   1.000000000000000   1.000000000000000
                   0  -1.117954622477538  -0.005503983465388  -0.026238313324734   0.670958122177969  -0.004134028828121
                   0                   0  -1.106796168176156  -0.010757595335341  -0.009326587404393   0.676525511531004
                   0                   0                   0   0.999804080177335   0.018047113351773  -0.150637049164786
                   0                   0                   0                   0  -0.893282314321321   0.010979509289477
                   0                   0                   0                   0                   0  -0.876098624651686


Y =

  -0.500000000000000  -0.499999900588771  -0.500009741475754  -0.500002253056410  -0.500000286192314  -0.499990015903692
                   0   0.000009999638990   0.000000127297985   0.000000442034118  -0.000009988577082  -0.000000045756443
   0.500000000000000   0.500000134714239   0.500002260696260   0.499990267148911   0.499999612175087   0.499999438103251


fY =

   0.500000000000000   0.500000035403030   0.500012002272037   0.499992520305321   0.499999898467405   0.499989454106944


ciY =

     []


ceY =

   1.0e-04 *

   0.000000000002220   0.102337644584116  -0.073534815093756  -0.115438733807038  -0.106625943091521   0.093764431161603
  -0.000000000001110   0.205028319260059  -0.027047910049482  -0.305675414402629  -0.214268212167523   0.082068931757107


ind_Y =

     6     9    10     7     8    11


i_xbest =

     6


scale =

   1.0e+09 *

   0.000000001000000
   0.000099988350921
   0.000099988350921
   0.000099988350921
   9.997670319950863
   9.997670319950863


info = 

         g: [3x1 double]
        ai: []
        ae: [2x3 double]
        hl: []
     niter: 3
      flag: 0
    nsimul: [0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        ci: []
        ce: [2x1 double]
         f: 0.499989454106944
      glag: [3x1 double]
     glagn: 1.607266542080765e-10
     feasn: 2.220446049250313e-16
     compl: 0
                    
                    
                    K>> info.g

ans =

  -0.498926312154690
   1.018118775549011
   0.058332470680966

K>> info.ae

ans =

   0.938427840952679   0.917770881621264   0.996743387259471
   0.928051570595708   1.839953619379350   2.996194575998562

K>> info.ce

ans =

   1.0e-05 *

   0.937644311616026
   0.820689317571066

K>> infoglag
Undefined function or variable 'infoglag'.
 
K>> info.glag

ans =

   1.0e-09 *

   0.057991111912514
   0.160726654208077
  -0.153898338517422
        
        c = 

           free: 0
          fixed: 1
    alwaysfixed: 2
             in: 1
            out: 0
         unused: 0
            inY: 1
          dummy: 1
        nodummy: 0



cur_degree =

     6


indfree =

     1
     2
     3



xl =

  -0.500000000000000
                   0
                -Inf


xu =

   Inf
   Inf
   Inf



dstatus =

     0
     0
     0
     0
     0
     0
     0
     0
     0
     0
     0


whichmodel =

     0



shift_Y =

     1


Delta =

   5.672511970824019


normgx =

   0.498926312154690


kappa_ill =

     1.000000000000000e+15


sigma =

   1.500000000000000
                    
OUTPUT VALUES



  -0.500000000000000
                   0
   0.500000000000000


fx =

   0.500000000000000


QZ =

   1.000000000000000                   0                   0                   0                   0                   0
                   0  -0.008891206010609   0.880092524061225  -0.216087341834818   0.011801709199185  -0.422522278591270
                   0  -0.894354200394905  -0.007052612842657   0.020660095393001   0.446785703792991   0.006043197219679
                   0  -0.012048659487353  -0.204172169927044  -0.975875461574765   0.016776691773235   0.074526377486275
                   0  -0.000044189137650  -0.428598309899763   0.020767625072745   0.004402943348236  -0.903245706680689
                   0  -0.447108866545437   0.002150237657216  -0.010733610864613  -0.894394997330149  -0.005605023022391


RZ =

   1.000000000000000   1.000000000000000   1.000000000000000   1.000000000000000   1.000000000000000   1.000000000000000
                   0  -1.117954622477538  -0.005503983465388  -0.026238313324734   0.670958122177969  -0.004134028828121
                   0                   0  -1.106796168176156  -0.010757595335341  -0.009326587404393   0.676525511531004
                   0                   0                   0   0.999804080177335   0.018047113351773  -0.150637049164786
                   0                   0                   0                   0  -0.893282314321321   0.010979509289477
                   0                   0                   0                   0                   0  -0.876098624651686


Y =

  -0.500000000000000  -0.499999900588771  -0.500009741475754  -0.500002253056410  -0.500000286192314  -0.499990015903692
                   0   0.000009999638990   0.000000127297985   0.000000442034118  -0.000009988577082  -0.000000045756443
   0.500000000000000   0.500000134714239   0.500002260696260   0.499990267148911   0.499999612175087   0.499999438103251


fY =

   0.500000000000000   0.500000035403030   0.500012002272037   0.499992520305321   0.499999898467405   0.499989454106944


ciY =

     []


ceY =

   1.0e-04 *

   0.000000000002220   0.102337644584116  -0.073534815093756  -0.115438733807038  -0.106625943091521   0.093764431161603
  -0.000000000001110   0.205028319260059  -0.027047910049482  -0.305675414402629  -0.214268212167523   0.082068931757107


ind_Y =

     6     9    10     7     8    11


i_xbest =

     6


scale =

   1.0e+09 *

   0.000000001000000
   0.000099988350921
   0.000099988350921
   0.000099988350921
   9.997670319950863
   9.997670319950863


info = 

         g: [3x1 double]
        ai: []
        ae: [2x3 double]
        hl: []
     niter: 3
      flag: 0
    nsimul: [0 11 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
        ci: []
        ce: [2x1 double]
         f: 0.500000000000000
      glag: [3x1 double]
     glagn: 1.607266542080765e-10
     feasn: 2.220446049250313e-16
     compl: 0

K>> info.g

ans =

  -0.498926312154690
   1.018118775549011
   0.058332470680966

K>> info.ae

ans =

   0.938427840952679   0.917770881621264   0.996743387259471
   0.928051570595708   1.839953619379350   2.996194575998562

K>> info.ce

ans =

   1.0e-15 *

   0.222044604925031
  -0.111022302462516

K>> info.glag

ans =

   1.0e-09 *

   0.057991111912514
   0.160726654208077
  -0.153898338517422                    
@author: jaco_da
"""

import unittest
from sqpdfo.sqpdfo_find_smallf import *
from numpy import array


class dummyC():
    def __init__(self):
        self.free = 0
        self.fixed = 1
        self.alwaysfixed = 2
        self.in_ = 1
        self.out = 0
        self.unused = 0
        self.inY = 1
        self.dummy = 1
        self.nodummy = 0


class dummyInfo():
    def __init__(self):
        self.g = array([[-0.498926312154690, 1.018118775549011, 0.058332470680966]]).T
        self.ai = array([])
        self.ae = array([[0.938427840952679,   0.917770881621264,   0.996743387259471],
                        [0.928051570595708,   1.839953619379350,   2.996194575998562]])
        self.hl = array( [])
        self.niter = 3
        self.flag = 0
        self.nsimul = array( [0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
        self.ci = array( [])
        self.ce = 1.0e-05 * array([[0.937644311616026, 0.820689317571066]]).T
        self.f = 0.499989454106944
        self.glag = 1.0e-09 * array([[    0.057991111912514, 0.160726654208077, -0.153898338517422]]).T
        self.glagn =  1.607266542080765e-10
        self.feasn =  2.220446049250313e-16
        self.compl = 0


class Test_sqpdfo_find_smallf(unittest.TestCase):
    """
    Reminder :
    This class is a test for sqpdfo_find_smallf which
  Subroutine finds the smallest value in fY, which are the associated function
  values of the set Y
    """
    def setUp(self):
        self.x = array([[  -0.500000000000000, 0, 0.500000000000000]]).T
        self.fx = 0.500000000000000
        self.QZ = array([
               [1.000000000000000,                   0,                   0,                   0,                   0,                   0],
                   [0,  -0.008891206010609,   0.880092524061225,  -0.216087341834818,   0.011801709199185,  -0.422522278591270],
                   [0,  -0.894354200394905,  -0.007052612842657,   0.020660095393001,   0.446785703792991,   0.006043197219679],
                   [0,  -0.012048659487353,  -0.204172169927044,  -0.975875461574765,   0.016776691773235,   0.074526377486275],
                   [0,  -0.000044189137650,  -0.428598309899763,   0.020767625072745,   0.004402943348236,  -0.903245706680689],
                   [0,  -0.447108866545437,   0.002150237657216,  -0.010733610864613,  -0.894394997330149,  -0.005605023022391]])
        self.RZ = array([
               [1.000000000000000,   1.000000000000000,   1.000000000000000,   1.000000000000000,   1.000000000000000,   1.000000000000000],
                   [0,  -1.117954622477538,  -0.005503983465388,  -0.026238313324734,   0.670958122177969,  -0.004134028828121],
                   [0,                   0,  -1.106796168176156,  -0.010757595335341,  -0.009326587404393,   0.676525511531004],
                   [0,                   0,                   0,   0.999804080177335,   0.018047113351773,  -0.150637049164786],
                   [0,                   0,                   0,                   0,  -0.893282314321321,   0.010979509289477],
                   [0,                   0,                   0,                   0,                   0,  -0.876098624651686]])
        self.Y =array([
            [  -0.500000000000000,  -0.499999900588771,  -0.500009741475754,  -0.500002253056410,  -0.500000286192314,  -0.499990015903692],
             [                  0,   0.000009999638990,   0.000000127297985,   0.000000442034118,  -0.000009988577082,  -0.000000045756443],
              [ 0.500000000000000,   0.500000134714239,   0.500002260696260,   0.499990267148911,   0.499999612175087,   0.499999438103251]])
        self.fY = array([0.500000000000000,   0.500000035403030,   0.500012002272037,   0.499992520305321,   0.499999898467405,   0.499989454106944])
        self.ciY = array( [])
        self.ceY = 1.0e-04 * array([[   0.000000000002220,   0.102337644584116,  -0.073534815093756,  -0.115438733807038,  -0.106625943091521,   0.093764431161603],
                            [-0.000000000001110,   0.205028319260059,  -0.027047910049482,  -0.305675414402629,  -0.214268212167523,   0.082068931757107]])

        self.ind_Y = array([ 5,     8,    9,     6,     7,    10])
        self.i_xbest =  5
        self.scale = 1.0e+09 * array([[0.000000001000000,0.000099988350921,   0.000099988350921,  0.000099988350921,  9.997670319950863, 9.997670319950863]]).T
        
        self.info = dummyInfo()
        
        self.c = dummyC()


        self.cur_degree = 6
        self.indfree = array([[0,  1, 2]]).T
        self.xl = array([[-0.500000000000000, 0, -np.Inf]]).T
        self.xu = array([[np.Inf,np.Inf,np.Inf]]).T
        self.dstatus = array([[ 0,     0,    0,     0,     0,     0,     0,     0,     0,     0,     0]]).T
        self.whichmodel =  0
        self.shift_Y =  1
        self.Delta = 5.672511970824019
        self.normgx = 0.498926312154690
        self.kappa_ill = 1.000000000000000e+15
        self.sigma = 1.500000000000000
        #self.options = helper.dummyOptions()
        #self.values = helper.dummyValues()
        self.abs_tol=1e-15
        self.rel_tol=1e-15

    def test_sqpdfo_find_smallf(self):
        """
        Test with some values, compare the results with matlab
        """
            
        x,fx,QZ,RZ,Y,fY,ciY,ceY,ind_Y,i_xbest,scale,info = sqpdfo_find_smallf_(self.c,self.QZ,self.RZ,self.Y,self.fY,self.ciY,self.ceY,self.ind_Y,
                    self.i_xbest,self.cur_degree,self.indfree,self.x,self.xl,
                    self.xu,self.fx,self.dstatus,self.whichmodel,self.scale,
                    self.shift_Y,self.Delta,self.normgx,self.kappa_ill,self.sigma,
                    self.info)
                    
        #print "info.ce", info.ce    
        correctx=array([ [-0.500000000000000,           0,  0.500000000000000]])
        correctfx = 0.500000000000000

        correctQZ = array([

   [1.000000000000000,                   0,                   0,                   0,                   0,                   0],
                   [0,  -0.008891206010609,   0.880092524061225,  -0.216087341834818,   0.011801709199185,  -0.422522278591270],
                  [ 0,  -0.894354200394905,  -0.007052612842657,   0.020660095393001,   0.446785703792991,   0.006043197219679],
                   [0,  -0.012048659487353,  -0.204172169927044,  -0.975875461574765,   0.016776691773235,   0.074526377486275],
                   [0,  -0.000044189137650,  -0.428598309899763,   0.020767625072745,   0.004402943348236,  -0.903245706680689],
                  [ 0,  -0.447108866545437,   0.002150237657216,  -0.010733610864613,  -0.894394997330149,  -0.005605023022391]])


        correctRZ = array([

   [1.000000000000000,   1.000000000000000,   1.000000000000000,   1.000000000000000 ,  1.000000000000000,   1.000000000000000],
                  [ 0,  -1.117954622477538,  -0.005503983465388,  -0.026238313324734,   0.670958122177969,  -0.004134028828121],
                  [ 0,                   0,  -1.106796168176156,  -0.010757595335341,  -0.009326587404393,   0.676525511531004],
                  [ 0,                   0,                   0,   0.999804080177335,   0.018047113351773,  -0.150637049164786],
                  [ 0,                   0,                   0,                   0,  -0.893282314321321,   0.010979509289477],
                  [ 0,                   0,                   0,                   0,                   0,  -0.876098624651686]])


        correctY = array([

  [-0.500000000000000,  -0.499999900588771,  -0.500009741475754,  -0.500002253056410,  -0.500000286192314,  -0.499990015903692],
    [               0,   0.000009999638990,   0.000000127297985,   0.000000442034118,  -0.000009988577082,  -0.000000045756443],
   [0.500000000000000,   0.500000134714239,   0.500002260696260,   0.499990267148911,   0.499999612175087,   0.499999438103251]])


        correctfY =array([[ 0.500000000000000,   0.500000035403030 ,  0.500012002272037,   0.499992520305321 ,  0.499999898467405 ,  0.499989454106944 ]])


        correctciY = array([])



        correctceY =  1.0e-04 * array([

  [ 0.000000000002220,   0.102337644584116,  -0.073534815093756,  -0.115438733807038,  -0.106625943091521,   0.093764431161603],
  [-0.000000000001110,   0.205028319260059,  -0.027047910049482,  -0.305675414402629,  -0.214268212167523,   0.082068931757107]])


        correctind_Y = array([[ 5,     8,    9,     6,     7,    10]])


        correcti_xbest = 5


        correctscale =   1.0e+09 * array([[   0.000000001000000,  0.000099988350921,  0.000099988350921,0.000099988350921, 9.997670319950863, 9.997670319950863]])

        correctinfoce =  1.0e-15 * array([[0.222044604925031,-0.111022302462516]]).T

        correctinfog= array([[  -0.498926312154690,  1.018118775549011,  0.058332470680966,]])

        correctinfoae=array([

   [0.938427840952679,   0.917770881621264,   0.996743387259471],
  [ 0.928051570595708,   1.839953619379350,   2.996194575998562]])

        correctinfoglag=1.0e-09*array([   0.057991111912514,  0.160726654208077, -0.153898338517422 ])

        self.assertTrue(compare_array(correctx,x, self.abs_tol, self.rel_tol)) 
        self.assertTrue(correctfx==fx) 
        self.assertTrue(compare_array(correctQZ,QZ, self.abs_tol, self.rel_tol)) 
        self.assertTrue(compare_array(correctRZ,RZ, self.abs_tol, self.rel_tol)) 
        self.assertTrue(compare_array(correctY,Y, self.abs_tol, self.rel_tol)) 
        self.assertTrue(compare_array(correctfY,fY, self.abs_tol, self.rel_tol)) 
        self.assertTrue(compare_array(correctciY,ciY, self.abs_tol, self.rel_tol)) 
        self.assertTrue(compare_array(correctceY,ceY, self.abs_tol, self.rel_tol)) 
        self.assertTrue(compare_array(correctind_Y,ind_Y, self.abs_tol, self.rel_tol)) 
        self.assertTrue(correcti_xbest==i_xbest)
        self.assertTrue(compare_array(correctscale,scale, self.abs_tol, self.rel_tol)) 



        self.assertTrue(compare_array(info.ce,correctinfoce, self.abs_tol, self.rel_tol)) 
        self.assertTrue(compare_array(info.g,correctinfog, self.abs_tol, self.rel_tol)) 
        self.assertTrue(compare_array(info.ae,correctinfoae, self.abs_tol, self.rel_tol)) 
        self.assertTrue(compare_array(info.glag,correctinfoglag, self.abs_tol, self.rel_tol)) 



        

if __name__ == '__main__':
    unittest.main()